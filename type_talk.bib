
@online{popov_type_nodate,
	title = {Type variance in {PHP}},
	url = {https://www.npopov.com/2021/11/08/Type-variance-in-PHP.html},
	author = {Popov, Nikita},
	urldate = {2022-05-30},
	file = {Type variance in PHP:/home/girgias/Zotero/storage/RKFBIBHT/Type-variance-in-PHP.html:text/html},
}

@inreference{noauthor_forme_2022,
	title = {Forme normale disjonctive},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://fr.wikipedia.org/w/index.php?title=Forme_normale_disjonctive&oldid=193799539},
	abstract = {En logique booléenne ou en calcul des propositions, une forme normale disjonctive ou {FND} (en anglais, disjunctive normal form  ou {DNF})  est une normalisation d'une expression logique qui est une disjonction de clauses conjonctives. Elle est utilisée dans la démonstration automatique de théorèmes. Une expression logique est en {FND} si et seulement si elle est une disjonction d'une ou plusieurs conjonctions d'un ou plusieurs littéraux. Tout comme dans une forme normale conjonctive ({FNC}), les seuls opérateurs dans une {FND} sont le et logique, le ou logique et la négation.},
	booktitle = {Wikipédia},
	urldate = {2022-10-10},
	date = {2022-05-18},
	langid = {french},
	note = {Page Version {ID}: 193799539},
}

@article{liskov_behavioral_1994,
	title = {A behavioral notion of subtyping},
	volume = {16},
	issn = {0164-0925},
	url = {https://doi.org/10.1145/197320.197383},
	doi = {10.1145/197320.197383},
	abstract = {The use of hierarchy is an important component of object-oriented design. Hierarchy allows the use of type families, in which higher level supertypes capture the behavior that all of their subtypes have in common. For this methodology to be effective, it is necessary to have a clear understanding of how subtypes and supertypes are related. This paper takes the position that the relationship should ensure that any property proved about supertype objects also holds for its subtype objects. It presents two ways of defining the subtype relation, each of which meets this criterion, and each of which is easy for programmers to use. The subtype relation is based on the specifications of the sub- and supertypes; the paper presents a way of specifying types that makes it convenient to define the subtype relation. The paper also discusses the ramifications of this notion of subtyping on the design of type families.},
	pages = {1811--1841},
	number = {6},
	journaltitle = {{ACM} Transactions on Programming Languages and Systems},
	shortjournal = {{ACM} Trans. Program. Lang. Syst.},
	author = {Liskov, Barbara H. and Wing, Jeannette M.},
	urldate = {2022-10-10},
	date = {1994-11-01},
	keywords = {formal specifications, Larch, subtyping},
	file = {Full Text PDF:/home/girgias/Zotero/storage/29DPWR2F/Liskov and Wing - 1994 - A behavioral notion of subtyping.pdf:application/pdf},
}

@online{seemann_liskov_2021,
	title = {The Liskov Substitution Principle as a profunctor},
	url = {https://blog.ploeh.dk/2021/12/06/the-liskov-substitution-principle-as-a-profunctor/},
	titleaddon = {ploeh blog danish software design},
	type = {Blog},
	author = {Seemann, Mark},
	urldate = {2022-10-10},
	date = {2021-12-06},
	file = {The Liskov Substitution Principle as a profunctor:/home/girgias/Zotero/storage/ETFQ32GF/the-liskov-substitution-principle-as-a-profunctor.html:text/html},
}

@online{banyard_saner_2020,
	title = {Saner numeric strings},
	url = {https://wiki.php.net/rfc/saner-numeric-strings},
	author = {Banyard, George Peter},
	urldate = {2022-10-10},
	date = {2020-06-28},
}

@online{banyard_disjunctive_2022,
	title = {Disjunctive Normal Form Types},
	url = {https://wiki.php.net/rfc/dnf_types},
	author = {Banyard, George Peter},
	urldate = {2022-10-10},
	date = {2022-04-07},
}

@online{banyard_add_2022,
	title = {Add true type},
	url = {https://wiki.php.net/rfc/true-type},
	author = {Banyard, George Peter},
	urldate = {2022-10-10},
	date = {2022-04-07},
}

@online{banyard_allow_2022,
	title = {Allow null and false as stand-alone types},
	url = {https://wiki.php.net/rfc/null-false-standalone-types},
	author = {Banyard, George Peter},
	urldate = {2022-10-10},
	date = {2022-02-20},
}

@online{banyard_pure_2021,
	title = {Pure intersection types},
	url = {https://wiki.php.net/rfc/pure-intersection-types},
	author = {Banyard, George Peter},
	urldate = {2022-10-10},
	date = {2021-03-23},
}

@inreference{noauthor_type_2022,
	title = {Type system},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://en.wikipedia.org/w/index.php?title=Type_system&oldid=1114430701},
	abstract = {In computer programming, a type system is a logical system comprising a set of rules that assigns a property called a type to every "term" (a word, phrase, or other set of symbols). Usually the terms are various constructs of a computer program, such as variables, expressions, functions, or modules. A type system dictates the operations that can be performed on a term. For variables, the type system determines the allowed values of that term. Type systems formalize and enforce the otherwise implicit categories the programmer uses for algebraic data types, data structures, or other components (e.g. "string", "array of float", "function returning boolean").
Type systems are often specified as part of programming languages and built into interpreters and compilers, although the type system of a language can be extended by optional tools that perform added checks using the language's original type syntax and grammar. The main purpose of a type system in a programming language is to reduce possibilities for bugs in computer programs due to type errors. The given type system in question determines what constitutes a type error, but in general, the aim is to prevent operations expecting a certain kind of value from being used with values for which that operation does not make sense (validity errors). Type systems allow defining interfaces between different parts of a computer program, and then checking that the parts have been connected in a consistent way. This checking can happen statically (at compile time), dynamically (at run time), or as a combination of both. Type systems have other purposes as well, such as expressing business rules, enabling certain compiler optimizations, allowing for multiple dispatch, and providing a form of documentation.},
	booktitle = {Wikipedia},
	urldate = {2022-10-10},
	date = {2022-10-06},
	langid = {english},
	note = {Page Version {ID}: 1114430701},
	file = {Snapshot:/home/girgias/Zotero/storage/HRMVIDUD/Type_system.html:text/html},
}